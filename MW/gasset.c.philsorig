#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include "nrsrc/nr.h"
#include "nrsrc/nrutil.h"

#include "prototypes.h"
#include "globvars.h"


static double R,z;



double set_gas_velocities(void)
{
  int   i;
  double q,R,phi,theta;
  long  dum;
  int   iz,ir;
  double ur,uz;
  double vdisp_rz,vdisp_phi,vstream_phi;
  double vr,vphi;
  double vx,vy,vz;
  double vdum,tdum,vx0,vy0,vz0;
  double xt,yt,zt,rt;



  if(N_GAS==0) return;

  dum=drand48()*1e8;

  printf("set gas velocities..."); fflush(stdout);  
  
  for(i=1;i<=N_GAS_DISK;i++)
    {
      if(i % 1000 == 0)
	printf("i = %d",i);

      R=sqrt(xp_gas[i]*xp_gas[i] + yp_gas[i]*yp_gas[i]);
      z=zp_gas[i];


      ir=(int)( log(R/LL*(pow(FR,RSIZE)-1)+1)/log(FR));
      ur=( log(R/LL*(pow(FR,RSIZE)-1)+1)/log(FR)) - ir;

      iz=(int)( log(fabs(z)/LL*(pow(FZ,ZSIZE)-1)+1)/log(FZ));
      uz=( log(fabs(z)/LL*(pow(FZ,ZSIZE)-1)+1)/log(FZ)) - iz;


   
      /* --------------------------------------------
	    Set Gas Temperature
	 -------------------------------------------- */
      vdisp_rz= VelDispRz_gas[ir][iz]*(1-ur)*(1-uz)
               +VelDispRz_gas[ir+1][iz]*(ur)*(1-uz)
   	       +VelDispRz_gas[ir][iz+1]*(1-ur)*(uz) 
               +VelDispRz_gas[ir+1][iz+1]*(ur)*(uz);


      u_gas[i]=vdisp_rz/(GAMMA-1);
      /* if(iz>=37) printf("\n%d has iz=37, is this a correlation?",i);  */
      /* if(vdisp_rz==0) printf("\n%d has vdisp_rz = 0",i);  */

      if(u_gas[i]<=1.0)
        {
       /* printf("\n%d has E=0, %g %g %g %d %d ",i,vdisp_rz,ur,uz,ir,iz); fflush(stdout);  */
	   u_gas[i]= 1.0;
        }

      /* -------------------------------------------- */

	 /* this assumes that the dispersion above is effective; but if its 
	      too large, it won't do anything, b/c it will immediately cool away, 
	      leaving the system without that pressure and so sub-Keplerian in velocity */
		/* u_gas_max ~ 5.0d4 * Q_eos */
      /* if(u_gas[i]>=1.0e4) u_gas[i]= 1.0e4; */
      /* REAL solution if this is a worry is to enforce an IC with a razor-thin disk; 
      		i.e. already cooled */

      vstream_phi=VelStreamPhi_gas[ir][iz]*(1-ur)*(1-uz)
	       +VelStreamPhi_gas[ir+1][iz]*(ur)*(1-uz)
	       +VelStreamPhi_gas[ir][iz+1]*(1-ur)*(uz) 
	       +VelStreamPhi_gas[ir+1][iz+1]*(ur)*(uz);
      vr=0;
      vz=0;
      vphi=vstream_phi;


	/* use the below lines if we want to initialize the gas disk as a 
		cold, dispersion-dominated disk (i.e. like a stellar disk), 
		rather than as the normal thermally supported disk */
/*
      vdisp_phi=VelDispPhi_gas[ir][iz]*(1-ur)*(1-uz)
	       +VelDispPhi_gas[ir+1][iz]*(ur)*(1-uz)
	       +VelDispPhi_gas[ir][iz+1]*(1-ur)*(uz) 
               +VelDispPhi_gas[ir+1][iz+1]*(ur)*(uz);
      if(vdisp_rz<0)  vdisp_rz=-vdisp_rz;
      if(vdisp_phi<0) vdisp_phi=-vdisp_phi;
       vr=gasdev(&dum)*sqrt(vdisp_rz)*Qstabilizefactor;
       vz=gasdev(&dum)*sqrt(vdisp_rz);
       vphi=vstream_phi + gasdev(&dum)*sqrt(vdisp_phi);
      u_gas[i]=vdisp_rz/(GAMMA-1)/100.0;
      if(u_gas[i]<=30.0)
	    u_gas[i]= 30.0;
*/
	/* here endeth the part of the code added to make the gas vdisp supported */




      vx=vr*xp_gas[i]/R - vphi*yp_gas[i]/R;
      vy=vr*yp_gas[i]/R + vphi*xp_gas[i]/R;

      vxp_gas[i]=vx;
      vyp_gas[i]=vy;
      vzp_gas[i]=vz;

      
      if((vx*vx+vy*vy+vz*vz)>0.95*vmax2_gas[i])
	{
	  /* printf("%d Gas velocity rejected\n",i); */
	  i--;
	}
    }

      
  if(N_GAS_FLOW > 0)
  {
  for(i=N_GAS_DISK+1;i<=N_GAS;i++)
  {
    tdum=0.017453; // =PI/180
	xt=xp_gas[i] - ColdFlowRinner;
	yt=yp_gas[i];
	zt=zp_gas[i];
	rt=sqrt(xt*xt+yt*yt+zt*zt);
	vz = Vvir;
	vx0 = -xt/rt * vz;
	vy0 = -yt/rt * vz;
	vz0 = -zt/rt * vz;
         vdum=gasdev(&dum); if(vdum>5.0) vdum=5.0; if(vdum<-5.0) vdum=-5.0;
	 vx0=vx0*(1.0 + 0.1*vdum);
         vdum=gasdev(&dum); if(vdum>5.0) vdum=5.0; if(vdum<-5.0) vdum=-5.0;
         vy0=vy0*(1.0 + 0.1*vdum);
         vdum=gasdev(&dum); if(vdum>5.0) vdum=5.0; if(vdum<-5.0) vdum=-5.0;
         vz0=vz0*(1.0 + 0.1*vdum);
      vxp_gas[i]=vx0;
      vyp_gas[i]=vy0;
      vzp_gas[i]=vz0;
      u_gas[i]=5000.;
  } // for(i=N_GAS_DISK;i<=N_GAS;i++)
  } // if(N_GAS_FLOW > 0)
   
  printf("done.\n"); fflush(stdout);
}





double set_gas_positions(void)
{
  int   i,countr,countz;
  double rtmp;
  double q,R,f,f_,Rold,phi,phiold,theta,PSI_HOLE,M_HOLE_NORM,PSI2_HOLE,F1_HOLE,F2_HOLE;
  double m_mode,eps_mode,epm1,epm2,epm3,epm4,del1,del2,del3,del4;
  double pw;
  double Rd;

  int n_disk,n_HI;

  if(N_GAS_DISK==0) return;

  srand48(GRAND);
  
  if(HI_GasMassFraction>0)
    {
      n_disk= (1-HI_GasMassFraction)*N_GAS_DISK;
      n_HI= N_GAS_DISK - n_disk;
    }
  else
    {
      n_disk= N_GAS_DISK;
      n_HI= 0;
    }

  switch(GasDistribution) {
        case 0:
          Rd= H;
          break;
        case 1:
          Rd= H*GasExpAlpha;
          break;
        case 2:
          Rd= H;
          break;
        case 3:
          Rd= H*GasExpAlpha;
                  F1_HOLE=(HoleRadius*HoleRadius)/(2.+HoleGamma+HoleRadius*(2.+HoleRadius+HoleGamma));
                  F2_HOLE=exp(HoleRadius)*(2.+HoleGamma)/(2.+HoleGamma+HoleRadius*(2.+HoleRadius+HoleGamma));
			// more convenient in this constant, but F2*(1+HoleRadius)*exp(-HoleRadius) gives massfrac in segment 2  
          break;
  }


  printf("Gas Rd= %g\n",Rd);

  for(i=1,countr=countz=0;i<=n_disk;)
    {
    rtmp=10*LL;
    do 
    {
      q=drand48();

      zp_gas[i]=Z0/2*log(q/(1-q));

      q=drand48();
      
      switch(GasDistribution) {
	  case 0:   /* Exponential Distribution */
	  case 1:
      		R=1.0;
      		do
		  {
	  	    f=(1+R)*exp(-R)+q-1;
	  	    f_=-R*exp(-R);
	  
	  	    Rold=R;
	  	    R=R-f/f_;
		  }
      		while(fabs(R-Rold)/R> 1e-6);

      		R*=Rd;
		break;
	  case 2:  /* Power-law distribution - gamma=1 is Mestel, or 1/R distribution */
		pw= 1/(2-PowerLawGamma);
		R=pow(q,pw);
		R*=(H*PowerLawCutOff);	            /* nomalized by Rt = PowerLawCutOff * DiskScaleLength */
		break;
	  case 3:
	    if(q < F1_HOLE) 
	     {
	     R=HoleRadius*pow(q/F1_HOLE,1./(2.+HoleGamma));
	     }
	    else
	     {
      		R=1.0;
      		do
		  {
	  	    f=(1+R)*exp(-R)*F2_HOLE+q-1;
	  	    f_=-R*exp(-R)*F2_HOLE;
	  
	  	    Rold=R;
	  	    R=R-f/f_;
		  }
      		while(fabs(R-Rold)/R> 1e-6);

		  }

      		R*=Rd;
		break;
	 }
	 rtmp=sqrt(R*R+zp_gas[i]*zp_gas[i]);
	}
	 while(rtmp>=LL);
      
      phi=drand48()*PI*2;
      if(SetInitModeAmp>0) {
        q=drand48();
        phi=2.*PI*q;
        m_mode=SetInitModeM;
        eps_mode=SetInitModeAmp*R/(SetInitModeCut+R);
        do 
       {
	  	 //f=q - (phi + eps_mode*sin(m_mode*phi)/m_mode)/(2.*PI);
	  	 //f_= - (1.+eps_mode*cos(m_mode*phi))/(2.*PI);
		 f  = q - (phi/(2.*PI) + eps_mode*sin(m_mode*phi)/m_mode);
		 f_ = -(1./(2.*PI)+eps_mode*cos(m_mode*phi));

	  	 phiold=phi;
	  	 phi=phi-f/f_;
		 phi=fmod(phi,2.*PI);
       }
        while(fabs((phi-phiold)/phi)> 1e-3);
      }

      xp_gas[i]=R*cos(phi);
      yp_gas[i]=R*sin(phi);


      //if(R>LL || fabs(zp_gas[i])>LL || R>10000.0)
      if(sqrt(R*R+zp_gas[i]*zp_gas[i])>=LL)
	{
	printf("ditch i=%d   R= %g  LL= %g\n",i,R,LL); fflush(stdout);
	countr++;
	i--;
	}
      else 
	i++;
    }



  for(i=1+n_disk;i<=N_GAS_DISK;)
    {
    rtmp=10*LL;
    do
    {
      q=drand48();

      zp_gas[i]=Z0/2*log(q/(1-q));

      q=drand48();
      
      R= H * sqrt(q) * HI_GasDiskScaleLength;

      rtmp=sqrt(R*R+zp_gas[i]*zp_gas[i]);
    }
     while(rtmp>=LL);
      
      phi=drand48()*PI*2;
	  
      xp_gas[i]=R*cos(phi);
      yp_gas[i]=R*sin(phi);
      

      if(sqrt(R*R+zp_gas[i]*zp_gas[i])>=LL) 
      {
	countr++;
	i--;
	}
      else 
	i++;
    }

    
  if(N_GAS_FLOW > 0)
  {
  for(i=N_GAS_DISK+1;i<=N_GAS;i++)
  {    
      Rd=2.0*Vvir*ColdFlowExtraMgas/(0.1*ColdFlowMdot);
      q=drand48();
      zp_gas[i]=Rd*q + 0.5*0.5*4.8*ColdFlowRinner;
   
      phi=drand48()*PI*2.0;
      q=drand48();
      R=ColdFlowRadius * sqrt(q) * (zp_gas[i]/(4.8*ColdFlowRinner));
      xp_gas[i]=R*cos(phi);
      yp_gas[i]=R*sin(phi);
 
      epm4=0.017453; // =PI/180
	  // now rotate the whole thing : about theta
      epm1=xp_gas[i];
      epm2=yp_gas[i];
      epm3=zp_gas[i];
      xp_gas[i]=epm1;
      yp_gas[i]=cos(ColdFlowTheta*epm4)*epm2 + sin(ColdFlowTheta*epm4)*epm3;
      zp_gas[i]=-sin(ColdFlowTheta*epm4)*epm2 + cos(ColdFlowTheta*epm4)*epm3;
	  // now rotate the whole thing : about phi
      epm1=xp_gas[i];
      epm2=yp_gas[i];
      epm3=zp_gas[i];
      xp_gas[i]=cos(ColdFlowPhi*epm4)*epm1 + sin(ColdFlowPhi*epm4)*epm2;
      yp_gas[i]=-sin(ColdFlowPhi*epm4)*epm1 + cos(ColdFlowPhi*epm4)*epm2;
      zp_gas[i]=epm3;
  
  	  // and offset it from zero
  	  xp_gas[i]=xp_gas[i] + ColdFlowRinner;
  
  } // for(i=N_GAS_DISK;i<=N_GAS;i++)
  } // if(N_GAS_FLOW > 0)
    


  for(i=1;i<=N_GAS;i++)
    mp_gas[i]=M_GAS/N_GAS_DISK;
}




